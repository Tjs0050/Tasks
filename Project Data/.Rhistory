file.path("folder1", "folder2")
?dir.create
dir.create("testdir2")
dir.create(file.path('testdir2', 'testdir3'), recursive = TRUE)
setwd(old.dir)
bye()
swirl()
1:20
pi:10
15:1
':'
?':'
seq(1,20)
seq(0,10,by=0.5)
seq(5,10, length=30)
my_seq <- seq(5,10, length=30)
length()
length(my_seq)
l:length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times= 40)
rep(c(0,1,2), times=10)
rep(c(0,1,2), each=10)
bye()
swirl()
c(44, NA, 5, NA)<-x
x<- c(44,NA,5,NA)
x*3
y<-rnorm(1000)
z<-rep(NA, 1000)
my_data<-sample(c(y,z),(100)
help
"my_data<-sample(c(y,z),(100)
help
help
pwieg
wfgw
gfw
g
weg
sample(c)
--my_data <- sample(c(y, z),100)
?
back
bye()
-
lis()
--my_data <- sample(c(y, z),100)
my_data <- sample(c(y,z),100)
is.na()
my_na <- is.na(my_data)
print(my_na)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>0]
c(3)
c(3,5,7)
[c(3,5,7)]
[] <-c(3,5,7)
info()
skip()
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo = 11,bar = 2, norf - NA)
vect <- c(foo = 11,bar = 2, norf = NA)
vect
names(vect)
vect <- c(11,2,NA)
skip()
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
swirl()
vect["bar"]
vect[c("foo", "bar")]
my_vector <- vect(1:20)
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_vector<- my_matrix
help
my_matrix<-my_vector
?matrix
matrix(1:20,4,5)<-my_matrix2
my_matrix2<-matrix(1:20,4,5)
identical(my_matrix, my_matrix2)
help
vect(Bill, Gina, Kelly, Sean)
vect(""Bill, Gina, Kelly, Sean)
vect("bill", "Gina", "Kelly", "Sean")
help
info()
my_vector<-Bill, Gina, Kelly, Sean
my_vector <- (Bill, Gina, Kelly, Sean)
my_vector <- (Bill:Gina:Kelly:Sean)
skip()
cbind(my_matrix)
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class()
class(my_data)
cnames <- vect("patient","age", "weight", "bp", "rating", "test")
help
c()
cnames <- "patient","age", "weight", "bp", "rating", "test"
cnames("patient", "age", "weight", "bp", "rating","test"
cnames("patient", "age", "weight", "bp", "rating","test")
cnames("patient", "age", "weight", "bp", "rating","test")
c("patient", "age", "weight", "bp", "rating","test")
skip()]
skip()
colnames()
colnames(my_data)
colnames(my_data) <- cnames
my_data
bye()
swirl()
TRUE==TRUE
(FALSE++TRUE)==FALSE
(FALSE==TRUE)==FALSE
6==7
6<7
10<=10
5!=7
5!=7
5==7
!5==7
FALSE & FALSE
TRUE & C(TRUE, TRUE, FALSE)
TRUE & c(TRUE, TRUE, FALSE)
TRUE & c(TRUE, FALSE, FALSE)
c(TRUE, FALSE,FALSE)
TRUE && c(TRUE,FALSE,FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5>8 |
5>8 |
5>8 |)
5>8||6 !=8&&4>3.9
isTRUE(6>4)
identical('twins','twins')
xor(5|==6, !FALSE)
xor(5==6, !FALSE)
ints <- sample(10)
ints
ints > 5
which()
which(>7)
which(c(>7())
help
which('ints >7)
which('ints >7')
which('ints >7')
which(`ints >7`)
ints>7
`ints > 7`
skip()
any()
any(`ints < 0`)
skip()
all()
info()
`ints>0`
skip()
Sysd.date()
Sys.date()
Sys.Date()
mean(c(2,4,5())
mean(c(2,4,5()))
mean(2,4,5)
mean(c(2,4,5))
submit()
boring_function('My first function!')
boring_function
submit()
submit()
skip()
my_mean(4,5,10)
my_mean(c(4, 5, 10))
submit()
skip()
remainder(5)
remainder(11,5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
submit()
skip()
evaluat()sd(c(1.4, 3.6, 7.9, 8.8))
evaluat(sd(c(1.4, 3.6, 7.9, 8.8)))
evaluate(sd(c(1.4, 3.6, 7.9, 8.8)))
evaluate(sd,(c(1.4, 3.6, 7.9, 8.8))
evaluate(sd,(c(1.4, 3.6, 7.9, 8.8)))
evaluate(sd,c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(c(8,4,0))
help
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit
submit()
skip()
telegram()
skip()
mad_libs(adjective = "", place = "", noun = "")
submit()
skip()
"I" %p% "love" %p% "R"
skip()
bye()
swirl()
data(cars)
help(cars)
head(cars)
plot(cars)
help(plot))
help(plot)
plot(x = cars$speed, y = cars$dist)
plot(x = cars$dist, y = cars$speed)
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(cars, main = "My Plot")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 2)
plot(cars, xlim = c(10, 15))
plot(cars, pch = 2)
data(mtcars)
help(boxplot)
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
q()
q()
Data <- read.csv ('http://jonsmitchell.com/data/beren.csv', stringsAsFactors=F)
write.csv(Data, 'rawdata.csv', quote=F)
length(Data)
nrow(Data)
ncol(Data)
colnames(Data)
head(data)
Data[1,]
Data[2,]
Data[1:3,]
Data[1:3,4]
Data[1:5, 1:3]
Feeds <- which(Data[,9] == 'bottle')
berenMilk <- Data[Feeds ,]
head(berenMilk)
Feeds <- which(Data[,'event'] == 'bottle')
head(Feeds)
Feeds <- which(Data$event == 'bottle')
head(Feeds)
dayID <- apply(Data, 1, function(x) paste(x[1:3], collapse='-'))
head(dayID)
dateID <- sapply(dayID, as.Date, format = "%Y-%m-%d", origin = "2019-04-18")
head(dateID)
Data$age <- dateID - dateID [which(Data$event == 'birth')]
head(data)
beren2 <- Data
beren3 <- beren2[order(beren2$age) ,]
Feeds <- which(beren3$event == "bottle")
avgMilk <- mean(beren3$value[Feeds])
avgFeed <- tapply(beren3$value[Feeds], beren3$age[Feeds], mean)
varFeed <-tapply(beren3$value[Feeds], beren3$age[Feeds], var)
totalFeed <-tapply(beren3$value[Feeds], beren3$age[Feeds], sum)
numFeeds <-tapply(beren3$value[Feeds], beren3$age[Feeds], length)
cor(beren3$value[Feeds], beren3$age[Feeds])
cor.test(beren3$value[Feeds], beren3$age[Feeds])
berenCor <- cor.test(beren3$value[Feeds], beren3$age[Feeds])
summary(berenCor)
berenANOVA <- aov(beren3$value[Feeds] ~ beren3$caregiver[Feeds])
boxplot( beren3$value[Feeds] ~ beren3$caregiver[Feeds], "who gave the bottle", ylab = "amount of milk consumed (oz)")
cor.test(beren3$value[Feeds], beren3$age[Feeds])
berenCor <- cor.test(beren3$value[Feeds], beren3$age[Feeds])
summary(berenCor)
berenANOVA <- aov(beren3$value[Feeds] ~ beren3$caregiver[Feeds])
boxplot(beren3$value[Feeds] ~ beren3$caregiver[Feeds], xlab= "who gave the bottle", ylab = "amount of milk consumed (oz)")
par(las=1, marc=c(5,5,1,1), mgp=c(2, 0.5, 0), tck=-0.01)
par(las=1, mar=c(5,5,1,1), mgp=c(2, 0.5, 0), tck=-0.01)
plot(as.numeric(names(totalFeed)), totalFeed, type="b", pch=16, xlab="age in days", ylab="ounces of milk")
abline(h=mean(totalFeed), lty=2, col='red')
par(las=1, mar=c(5,5,1,1), mgp=c(2, 0.5, 0), tck=-0.01)
plot(as.numeric(names(totalFeed)), totalFeed, type="b", pch=16, xlab="age in days", ylab="ounces of milk")
abline(h=mean(totalFeed), lty=2, col='red')
dev.off()
pdf(''r02b-totalMilkByDay.pdf'', height=4, width=4)
pdf(''r02b-totalMilkByDay.pdf, height=4, width=4)
pdf("r02b-totalMilkByDay.pdf", height=4, width=4)
par(las=1, mar=c(5,5,1,1), mgp=c(2, 0.5, 0), tck=-0.01)
plot(as.numeric(names(totalFeed)), totalFeed, type="b", pch=16, xlab="age in days", ylab="ounces of milk")
abline(h=mean(totalFeed), lty=2, col='red')
dev.off()
q()
Data <- read.csv ('http://jonsmitchell.com/data/beren.csv', stringsAsFactors=F)
write.csv(Data, 'rawdata.csv', quote=F)
length(Data)
nrow(Data)
ncol(Data)
colnames(Data)
head(data)
Data[1,]
Data[2,]
Data[1:3,]
Data[1:3,4]
Data[1:5, 1:3]
Feeds <- which(Data[,9] == 'bottle')
berenMilk <- Data[Feeds ,]
head(berenMilk)
Feeds <- which(Data[,'event'] == 'bottle')
head(Feeds)
Feeds <- which(Data$event == 'bottle')
head(Feeds)
dayID <- apply(Data, 1, function(x) paste(x[1:3], collapse='-'))
head(dayID)
dateID <- sapply(dayID, as.Date, format = "%Y-%m-%d", origin = "2019-04-18")
head(dateID)
Data$age <- dateID - dateID [which(Data$event == 'birth')]
head(data)
beren2 <- Data
beren3 <- beren2[order(beren2$age) ,]
Feeds <- which(beren3$event == "bottle")
avgMilk <- mean(beren3$value[Feeds])
avgFeed <- tapply(beren3$value[Feeds], beren3$age[Feeds], mean)
varFeed <-tapply(beren3$value[Feeds], beren3$age[Feeds], var)
totalFeed <-tapply(beren3$value[Feeds], beren3$age[Feeds], sum)
numFeeds <-tapply(beren3$value[Feeds], beren3$age[Feeds], length)
cor(beren3$value[Feeds], beren3$age[Feeds])
cor.test(beren3$value[Feeds], beren3$age[Feeds])
berenCor <- cor.test(beren3$value[Feeds], beren3$age[Feeds])
summary(berenCor)
berenANOVA <- aov(beren3$value[Feeds] ~ beren3$caregiver[Feeds])
boxplot(beren3$value[Feeds] ~ beren3$caregiver[Feeds], xlab= "who gave the bottle", ylab = "amount of milk consumed (oz)")
par(las=1, marc=c(5,5,1,1), mgp=c(2, 0.5, 0), tck=-0.01)
plot(as.numeric(names(totalFeed)), totalFeed, type="b", pch=16, xlab="age in days", ylab="ounces of milk")
abline(h=mean(totalFeed), lty=2, col='red')
pdf(''r02b-totalMilkByDay.pdf'', height=4, width=4)
par(las=1, mar=c(5,5,1,1), mgp=c(2, 0.5, 0), tck=-0.01)
plot(as.numeric(names(totalFeed)), totalFeed, type="b", pch=16, xlab="age in days", ylab="ounces of milk")
abline(h=mean(totalFeed), lty=2, col='red')
dev.off()
pdf(``r02b-totalMilkByDay.pdf``, height=4, width=4)
par(las=1, mar=c(5,5,1,1), mgp=c(2, 0.5, 0), tck=-0.01)
plot(as.numeric(names(totalFeed)), totalFeed, type="b", pch=16, xlab="age in days", ylab="ounces of milk")
abline(h=mean(totalFeed), lty=2, col='red')
pdf("r02b-totalMilkByDay.pdf", height=4, width=4)
par(las=1, mar=c(5,5,1,1), mgp=c(2, 0.5, 0), tck=-0.01)
plot(as.numeric(names(totalFeed)), totalFeed, type="b", pch=16, xlab="age in days", ylab="ounces of milk")
abline(h=mean(totalFeed), lty=2, col='red')
dev.off()
plot(as.numeric(names(totalFeed)), totalFeed, type="b", pch=16, xlab="nap time", ylab="ounces of milk")
dev.off()
?par
boxplot(beren3$value[Feeds] ~ beren3$age[Feeds], xlab= "nap time", ylab = "amount of milk consumed (oz)")
par(las=1, marc=c(5,5,1,1), mgp=c(2, 0.5, 0), tck=-0.01)
plot(as.numeric(names(totalFeed)), totalFeed, type="b", pch=16, xlab="age in days", ylab="ounces of milk")
abline(h=mean(totalFeed), lty=2, col='red')
pdf("r02b-totalMilkByDay.pdf", height=4, width=4)
par(las=1, mar=c(5,5,1,1), mgp=c(2, 0.5, 0), tck=-0.01)
plot(as.numeric(names(totalFeed)), totalFeed, type="b", pch=16, xlab="nap time", ylab="ounces of milk")
abline(h=mean(totalFeed), lty=2, col='red')
dev.off()
q()
trueMean1 <- 5
trueSD1 <- 5
population1 <- rnorm(1e6, trueMean1, trueSD1)
trueMean2 <- 4
trueSD2 <- 5
population2 <- rnorm(1e6, trueMean2, trueSD2)
Size <- 50
Sample1 <- sample(population1, Size)
Sample2 <- sample(population2, Size)
boxplot(Sample1, Sample2)
source("http://jonsmitchell.com/code/simFxn04.R")
MatGrandma <- makeFounder("grandma_mom")
MatGrandpa <- makeFounder("grandpa_mom")
PatGrandma <- makeFounder("grandma_da")
PatGrandpa <- makeFounder("grandpa_da")
Alan <- makeBaby(PatGrandma, PatGrandpa)
Brenda <- makeBaby(MatGrandma, MatGrandpa)
Focus <- makeBaby(Brenda, Alan)
ToMom <- length( grep("mom", Focus ) ) / length( Focus )
ToMomMom <- length( grep("grandma_mom", Focus ) )/length( Focus )
ToMomDad <- length( grep("grandpa_mom", Focus ) )/length( Focus )
Sibling_01 <- makeBaby(Brenda, Alan)
ToSib <- length( intersect( Focus, Sibling_01 ) ) / length( Focus )
ManySiblings <- replicate( 1e3, length( intersect( Focus, makeBaby(Brenda, Alan) ) ) /length( Focus ) )
quantile(ManySiblings)
mean(ManySiblings)
plot(density(ManySiblings), main="", xlab="proportion shared genes")
HWE <- function(p) {
aa<- p^2
ab<- 2*p*(1-p)
bb<- (1-p)^2
return(c(aa=aa, ab=ab, bb=bb))
}
HWE(0.5)
plot(1, 1, type="n" , xlim=c(0, 1), ylim=c(0, 1), xlab="freq. allele a", ylab="geno. freq")
p <- seq(from = 0, to = 1, by = 0.01)
GenoFreq<- t(sapply(p, HWE))
lines(p, GenoFreq[,"aa"], lwd=2, col="red")
lines(p, GenoFreq[,"ab"], lwd=2, col="purple")
lines(p, GenoFreq[,"bb"], lwd=2, col="blue")
lines(p, GenoFreq[,"aa"], lwd=2, col="red")
plot(1, 1, type="n" , xlim=c(0, 1), ylim=c(0, 1), xlab="freq. allele a", ylab="geno. freq")
p <- seq(from = 0, to = 1, by = 0.01)
GenoFreq<- t(sapply(p, HWE))
lines(p, GenoFreq[,"aa"], lwd=2, col="red")
lines(p, GenoFreq[,"ab"], lwd=2, col="purple")
lines(p, GenoFreq[,"bb"], lwd=2, col="blue")
legend("top", legend=c("aa","ab","bb"), col=c("red","purple","blue"), lty=1, lwd=2, bty="n")
plot(1, 1, type="n" , xlim=c(0, 1), ylim=c(0, 1), xlab="freq. allele a", ylab="geno. freq")
p <- seq(from = 0, to = 1, by = 0.01)
GenoFreq<- t(sapply(p, HWE))
lines(p, GenoFreq[,"aa"], lwd=2, col="red")
lines(p, GenoFreq[,"ab"], lwd=2, col="purple")
lines(p, GenoFreq[,"bb"], lwd=2, col="blue")
legend("top", legend=c("aa","ab","bb"), col=c("red","purple","blue"), lty=1, lwd=2, bty="n")
Pop<- simPop(500)
points(Pop[,"freqa"], Pop[,"Genotypes.aa"]/500, pch=21, bg="red")
Pop<- simPop(50)
points(Pop[,"freqa"], Pop[,"Genotypes.aa"]/50, pch=22, bg="red")
library(learnPopGen)
x <- genetic.drift(Ne=200, nrep=5, pause=0.01)
PopSizes <- 5:50
Samples <- rep(PopSizes, 5)
tExt <- sapply(Samples, function(x) nrow(simPop(x, 500)))
Line <- lm(tExt ~ Samples)
summary(Line)
Line$coef
plot(Samples, tExt)
abline(Line)
x <- genetic . drift(Ne=200, nrep=5, pause=0.01)
PopSizes <- 5:50
Samples <- rep(PopSizes, 5)
tExt <- sapply(Samples, function(x) nrow(simPop(x, 500)))
Line <- lm(tExt ~ Samples)
summary(Line)
Line$coef
plot(Samples, tExt)
q()
q()
setwd("C:\\Users\\tyler\\OneDrive\\Desktop\\Evolution\\Tasks\\Project Data")
Dat <- read.csv("data.csv")
Dat <- read.csv("data.csv")
head(Dat)
Year01 <- grep("01", colnames(Dat))
Year02 <- grep("02", colnames(Dat))
Year01 <- grep("01", colnames(Dat))
Year02 <- grep("02", colnames(Dat))
StartCol <- grep("Jan", colnames(Dat))
plot(Dat[,Year01])
plot(1, 1, type="n", xlim=c(1, 12), ylim=c(0, 500), xlab="month", ylab="num. of flowers")
for (i in 1:nrow(Dat))  {
points(1:12, Dat[i,Year01], pch=16, type="b")
}
n
range(Dat)
range(as.numeric(Dat[,Year01]))
Dat[,Year01]
plot(1, 1, type="n", xlim=c(1, 12), ylim=c(0, 1000), xlab="month", ylab="num. of flowers")
for (i in 1:nrow(Dat))  {
points(1:12, Dat[i,Year01], pch=16, type="b")
}
par(mfrow=c(1,2), mgp=c(2.5,0.25,0), tck=-0.01, las=1)
plot(1, 1, type="n", xlim=c(1, 12), ylim=c(0, 1000), xlab="month", ylab="num. of flowers")
for (i in 1:nrow(Dat))  {
points(1:12, Dat[i,Year01], pch=16, type="b")
}
par(mfrow=c(1,2), mgp=c(2.5,0.25,0), tck=-0.01, las=1, mar=c(4,5,3,1))
plot(1, 1, type="n", xlim=c(1, 12), ylim=c(0, 1000), xlab="month", ylab="num. of flowers", main="year 01")
for (i in 1:nrow(Dat))  {
points(1:12, Dat[i,Year01], pch=16, type="b")
}
plot(1, 1, type="n", xlim=c(1, 12), ylim=c(0, 1000), xlab="month", ylab="num. of flowers", main = "year 02")
for (i in 1:nrow(Dat))  {
points(1:12, Dat[i,Year02], pch=16, type="b")
}
pdf("plot01.pdf", height=4, width=8)
par(mfrow=c(1,2), mgp=c(2.5,0.25,0), tck=-0.01, las=1, mar=c(4,5,3,1))
plot(1, 1, type="n", xlim=c(1, 12), ylim=c(0, 1000), xlab="month", ylab="num. of flowers", main="year 01")
for (i in 1:nrow(Dat))  {
points(1:12, Dat[i,Year01], pch=16, type="b")
}
plot(1, 1, type="n", xlim=c(1, 12), ylim=c(0, 1000), xlab="month", ylab="num. of flowers", main = "year 02")
for (i in 1:nrow(Dat))  {
points(1:12, Dat[i,Year02], pch=16, type="b")
}
dev.off()
